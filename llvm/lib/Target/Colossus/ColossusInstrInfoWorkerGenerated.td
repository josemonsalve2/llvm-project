//
// Graphcore Limited.
//
// Automatically generated file.
// 
// Generated by llvm_generation.py
//

// Instructions.

class inst_and64_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "and64 $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_and_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "and $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_and_aaan_iz : EncodedWorkerI, Sched<[WriteAux]> {
  // FSDI3
  let AsmString = "and $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm12iz:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b100;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_and_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FSDI3
  let AsmString = "and $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_andc64_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "andc64 $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_andc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "andc $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_andc_aaan_iz : EncodedWorkerI, Sched<[WriteAux]> {
  // FSDI3
  let AsmString = "andc $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm12iz:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b111;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_andc_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FSDI3
  let AsmString = "andc $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b011;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_atom_mamn : EncodedWorkerI, Sched<[WriteMain]> {
  // FNX2A
  let AsmString = "atom $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23-20} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{15-12} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{19-16} = op0;
  let Inst{7-4} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_exitneg_mmmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FMX4
  let AsmString = "exitneg $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = 0b0;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b001;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 0; // Can coissue.
}
class inst_exitnz_mmmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FMX4
  let AsmString = "exitnz $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = 0b0;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 0; // Can coissue.
}
class inst_exitpos_mmmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FMX4
  let AsmString = "exitpos $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = 0b0;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b011;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 0; // Can coissue.
}
class inst_exitz_mmmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FMX4
  let AsmString = "exitz $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = 0b0;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 0; // Can coissue.
}
class inst_f16tof32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16tof32 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2absadd_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2absadd $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2absmax_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2absmax $op0, $op2, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2add_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2add $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2add_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2add $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2add_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2add $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2clamp_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2clamp $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2class_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2class $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmac_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAX
  let AsmString = "f16v2cmac $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins AR:$op0, AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{7} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{6-4} = 0b000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{3-0} = 0b0000;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpeq_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpeq_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpeq_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpge_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpge_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpge_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpgt_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpgt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpgt_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmple_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmple $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmple_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmple $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmple_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmple $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmplt_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmplt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmplt_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpne_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpne_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2cmpne_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2exp2_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2exp2 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2exp_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2exp $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b011;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2gina_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FABI3
  let AsmString = "f16v2gina $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b101;
  let Inst{23-20} = op1;
  let Inst{19-16} = op0;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2grand_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FX3BX
  let AsmString = "f16v2grand $op0";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = 0b0000;
  let Inst{19-16} = 0b0000;
  let Inst{15-12} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2ln_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2ln $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b001;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2log2_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2log2 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2max_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2max $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2maxc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2maxc $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2min_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2min $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2mul_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2mul $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2mul_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2mul $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2mul_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2mul $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2sigm_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2sigm $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b101;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2sub_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2sub $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2sub_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2sub $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2sub_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v2sub $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2sufromui_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2sufromui $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2sum_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2sum $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2tanh_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2tanh $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b101;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2tof32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2tof32 $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b001;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v2tof8_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v2tof8 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b101;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_f16v4absacc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f16v4absacc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARPairOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4absadd_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4absadd $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4absmax_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4absmax $op0, $op2, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4acc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f16v4acc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARPairOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4add_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4add $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4add_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4add $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4add_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4add $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4clamp_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4clamp $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4class_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v4class $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b110;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmac_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAX
  let AsmString = "f16v4cmac $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARPairOperand:$op0, ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{7} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{6-4} = 0b000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{3-0} = 0b0000;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpeq_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpeq_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpeq_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpge_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpge_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpge_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpgt_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpgt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpgt_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmple_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmple $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmple_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmple $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmple_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmple $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmplt_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmplt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmplt_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpne_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpne_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4cmpne_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4gacc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FX3BX
  let AsmString = "f16v4gacc $op0";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = 0b0000;
  let Inst{19-16} = 0b0000;
  let Inst{15-12} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4hihoamp_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4hihoamp $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, AR:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4hihoslic_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4hihoslic $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, AR:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4hihov4amp_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4hihov4amp $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b1;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu2Plus];
}
class inst_f16v4hihov4slic_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4hihov4slic $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b1;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu2Plus];
}
class inst_f16v4istacc_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4istacc $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4max_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4max $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4maxc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v4maxc $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b110;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4min_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4min $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4mix_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4mix $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4mul_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4mul $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4mul_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4mul $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4mul_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4mul $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4rmask_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4rmask $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sihoamp_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4sihoamp $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sihoslic_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4sihoslic $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sisoamp_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4sisoamp $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sisoslic_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f16v4sisoslic $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4stacc_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FXBXI2
  let AsmString = "f16v4stacc $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins imm8zi:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<8> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{23-20} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = op0;
  let Inst{7-0} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sub_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4sub $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sub_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4sub $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sub_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f16v4sub $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sufromui_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v4sufromui $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b110;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v4sum_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v4sum $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v8absacc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f16v8absacc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARQuadOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v8acc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f16v8acc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARQuadOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v8sqacc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f16v8sqacc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARQuadOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f16v8tof8_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f16v8tof8 $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARQuadOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_f32absadd_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32absadd $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32absmax_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32absmax $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32add_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32add $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32clamp_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32clamp $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32class_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32class $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32cmpeq_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32cmpge_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32cmpgt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32cmple_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32cmple $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32cmplt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32cmpne_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32div_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32div $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32exp2_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32exp2 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32exp_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32exp $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b011;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32fromi32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32fromi32 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b111;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32fromui32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32fromui32 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32int_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABXI
  let AsmString = "f32int $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm4zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{14-12} = 0b000;
  let Inst{7-4} = 0b0000;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{3-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32ln_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32ln $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b001;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32log2_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32log2 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32mac_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAX
  let AsmString = "f32mac $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins AR:$op0, AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{7} = 0b1;
  let Inst{19-16} = 0b0000;
  let Inst{6-4} = 0b000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{3-0} = 0b0000;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32max_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32max $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32min_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32min $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32mul_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32mul $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32oorx_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32oorx $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32oox_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32oox $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b011;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32sigm_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32sigm $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b101;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32sisoamp_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f32sisoamp $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins AR:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b111;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32sisoslic_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f32sisoslic $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins AR:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b110;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b0;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32sisov2amp_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f32sisov2amp $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins AR:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b111;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b1;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu2Plus];
}
class inst_f32sisov2slic_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f32sisov2slic $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins AR:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b110;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b1;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu2Plus];
}
class inst_f32sqrt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32sqrt $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32sub_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32sub $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32sufromui_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32sufromui $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32tanh_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32tanh $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b101;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32tof16_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32tof16 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b011;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32toi32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32toi32 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32toui32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32toui32 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b101;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2absadd_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2absadd $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2absmax_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2absmax $op0, $op2, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2add_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2add $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2add_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2add $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2aop_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAI2
  let AsmString = "f32v2aop $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARPairOperand:$op0, ARPairOperand:$op1, imm8zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b100;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2axpy_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2axpy $op0, $op2, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2clamp_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2clamp $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2class_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32v2class $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b111;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpeq_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpeq_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpge_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpge_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpge $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpgt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpgt_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpgt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmple_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmple $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmple_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmple $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmplt_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmplt_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmplt $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpne_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2cmpne_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2gina_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FABI3
  let AsmString = "f32v2gina $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{23-20} = op1;
  let Inst{19-16} = op0;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2grand_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FX3BX
  let AsmString = "f32v2grand $op0";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = 0b0000;
  let Inst{19-16} = 0b0000;
  let Inst{15-12} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2mac_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAX
  let AsmString = "f32v2mac $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARPairOperand:$op0, ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{7} = 0b1;
  let Inst{19-16} = 0b0000;
  let Inst{6-4} = 0b000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{3-0} = 0b0000;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2max_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2max $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2min_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2min $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2mul_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2mul $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2mul_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2mul $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2rmask_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2rmask $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2sub_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2sub $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2sub_aaat : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "f32v2sub $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins BroadcastOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2sufromui_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32v2sufromui $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b011;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v2tof16_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32v2tof16 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v4absacc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f32v4absacc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARQuadOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v4acc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f32v4acc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARQuadOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v4sqacc_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX4
  let AsmString = "f32v4sqacc $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins ARQuadOperand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f32v4tof16_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f32v4tof16 $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARQuadOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_f8v2tof16_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f8v2tof16 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b100;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_f8v4class_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f8v4class $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b011;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_f8v4tof16_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "f8v4tof16 $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b110;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_f8v8hihov4amp_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f8v8hihov4amp $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b1;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_f8v8hihov4slic_aaan_ef : EncodedWorkerI, Sched<[WriteAux]> {
  // FABAJ2
  let AsmString = "f8v8hihov4slic $op0, $op1, $op2, $op3";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, imm6zi:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<6> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{19-16} = op0;
  let Inst{15-12} = op1;
  let Inst{23-20} = op2;
  let Inst{7} = 0b0;
  let Inst{6} = 0b1;
  let Inst{5-0} = op3;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_ld128_mman : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ld128 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs ARQuadOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{3-2} = 0b01;
  let Inst{1-0} = 0b01;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld128_mman_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ld128 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs ARQuadOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld128step_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ld128step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, ARQuadOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld128step_mmbn_si : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ld128step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, ARQuadOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld2x64pace_mmbn_ef : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMBPBI
  let AsmString = "ld2x64pace $op2, $op3, $op1, $op0, $op4";
  dag OutOperandList = (outs MRPair:$op1, ARPairOperand:$op2, ARPairOperand:$op3);
  dag InOperandList = (ins MR:$op0, MRPair:$op1_in, imm4zi:$op4, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<4> op4;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let Inst{3-0} = op4;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{14-12} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld2xst64pace_mbbn_ef : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FMBPKAI
  let AsmString = "ld2xst64pace $op2, $op3, $op1, $op0, $op4";
  dag OutOperandList = (outs MRPair:$op1, ARQuadOperand:$op2);
  dag InOperandList = (ins MR:$op0, MRPair:$op1_in, ARPairOperand:$op3, imm6zi:$op4, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<6> op4;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{16} = 0b0;
  let Inst{10} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-17} = op2{3-1};
  let Inst{7-4} = op3;
  let Inst{3-0} = op4{3-0};
  let Inst{9-8} = op4{5-4};
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
  let mayStore = 1;
}
class inst_ld32_mman : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ld32 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{3-2} = 0b00;
  let Inst{1-0} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld32_mman_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ld32 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld32step_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ld32step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld32step_mmbn_si : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ld32step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64_mman : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ld64 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{3-2} = 0b00;
  let Inst{1-0} = 0b01;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64_mman_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ld64 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64a32_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ld64a32 $op3, $op1, $op0, $op2";
  dag OutOperandList = (outs MR:$op1, ARQuadOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 1; // Operand modifier.
  let TSFlags{11-9} = 1; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64a32pace_mmbn_ef : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMBPBI
  let AsmString = "ld64a32pace $op2, $op3, $op1, $op0, $op4";
  dag OutOperandList = (outs MRPair:$op1, ARPairOperand:$op2, AR:$op3);
  dag InOperandList = (ins MR:$op0, MRPair:$op1_in, imm4zi:$op4, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<4> op4;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let Inst{3-0} = op4;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{14-12} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64b16pace_mmbn_ef : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMBPBI
  let AsmString = "ld64b16pace $op2, $op3, $op1, $op0, $op4";
  dag OutOperandList = (outs MRPair:$op1, ARPairOperand:$op2, AR:$op3);
  dag InOperandList = (ins MR:$op0, MRPair:$op1_in, imm4zi:$op4, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<4> op4;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let Inst{3-0} = op4;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{14-12} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64step_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ld64step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, ARPairOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64step_mmbn_si : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ld64step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, ARPairOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldb16_mman : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ldb16 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-2} = 0b01;
  let Inst{1-0} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldb16_mman_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ldb16 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldb16b16_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMP2B
  let AsmString = "ldb16b16 $op3, $op0, $op2, $op1";
  dag OutOperandList = (outs MR:$op1, MR:$op2, ARPairOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2_in, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in, $op2 = $op2_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 3; // Operand modifier.
  let TSFlags{5-3} = 1; // Operand modifier.
  let TSFlags{14-12} = 3; // Operand modifier.
  let TSFlags{17-15} = 1; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldb16step_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ldb16step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldb16step_mmbn_si : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ldb16step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldb8_mman : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ldb8 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-2} = 0b11;
  let Inst{1-0} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_ldb8_mman_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ldb8 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_ldb8step_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ldb8step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_ldb8step_mmbn_si : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ldb8step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_ldd16a32_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMP2B
  let AsmString = "ldd16a32 $op3, $op1, $op0, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op2, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2_in, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in, $op2 = $op2_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 1; // Operand modifier.
  let TSFlags{5-3} = 4; // Operand modifier.
  let TSFlags{14-12} = 1; // Operand modifier.
  let TSFlags{17-15} = 4; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldd16a64_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMP2B
  let AsmString = "ldd16a64 $op3, $op1, $op0, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op2, ARPairOperand:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2_in, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in, $op2 = $op2_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b011;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 1; // Operand modifier.
  let TSFlags{5-3} = 4; // Operand modifier.
  let TSFlags{14-12} = 1; // Operand modifier.
  let TSFlags{17-15} = 4; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldd16b16_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMP2B
  let AsmString = "ldd16b16 $op3, $op1, $op0, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op2, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2_in, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in, $op2 = $op2_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b100;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 1; // Operand modifier.
  let TSFlags{5-3} = 4; // Operand modifier.
  let TSFlags{14-12} = 1; // Operand modifier.
  let TSFlags{17-15} = 4; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldd16v2a32_mmbn : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain, WriteFreeMain]> {
  // FMP2B
  let AsmString = "ldd16v2a32 $op3, $op1, $op0, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op2, AR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2_in, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in, $op2 = $op2_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 1; // Operand modifier.
  let TSFlags{5-3} = 4; // Operand modifier.
  let TSFlags{14-12} = 1; // Operand modifier.
  let TSFlags{17-15} = 4; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldst64pace_mbbn_ef : EncodedWorkerI, Sched<[WriteMain, WriteFreeMain]> {
  // FMBPAI
  let AsmString = "ldst64pace $op2, $op3, $op1, $op0, $op4";
  dag OutOperandList = (outs MRPair:$op1, ARPairOperand:$op2);
  dag InOperandList = (ins MR:$op0, MRPair:$op1_in, ARPairOperand:$op3, imm4zi:$op4, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<4> op4;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-4} = op3;
  let Inst{19-16} = op2;
  let Inst{3-0} = op4;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
  let mayStore = 1;
}
class inst_not64_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "not64 $op0, $op1";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b111;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_not_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "not $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b111;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_or64_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "or64 $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_or_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "or $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_or_aaan_iz : EncodedWorkerI, Sched<[WriteAux]> {
  // FSDI3
  let AsmString = "or $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm12iz:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b101;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_or_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FSDI3
  let AsmString = "or $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b001;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_roll16_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "roll16 $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_roll32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "roll32 $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_roll8l_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "roll8l $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_roll8r_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "roll8r $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b01;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_rpt_mmmn_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMXI2
  let AsmString = "rpt $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, Rel8Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<8> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b010;
  let Inst{11-8} = 0b0000;
  let Inst{19-16} = 0b0000;
  let Inst{7-0} = op1;
  let Inst{23-20} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_rpt_mmmn_zi_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FI3I2
  let AsmString = "rpt $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins imm12zi:$op0, Rel8Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<12> op0;
  bits<8> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23} = 0b0;
  let Inst{22-20} = 0b000;
  let Inst{19-8} = op0;
  let Inst{7-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_setzi_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FDI5
  let AsmString = "setzi $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins Rel20Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<20> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{19-0} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shuf8x8hi_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "shuf8x8hi $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_shuf8x8lo_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "shuf8x8lo $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_sort4x16hi_aaal : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort4x16hi $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastLowerOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b10;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu2Plus];
}
class inst_sort4x16hi_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort4x16hi $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort4x16lo_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort4x16lo $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort4x16lo_aaau : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort4x16lo $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins BroadcastUpperOperand:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b11;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort4x32hi_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort4x32hi $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b10;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort4x32lo_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort4x32lo $op0, $op1, $op2";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins ARPairOperand:$op1, ARPairOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b11;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort8_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "sort8 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b111;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b011;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_sort8x8hi_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort8x8hi $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b10;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_sort8x8lo_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FAXAB
  let AsmString = "sort8x8lo $op0, $op1, $op2";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, AR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b11;
  let Inst{3-2} = 0b00;
  let Inst{19-18} = 0b00;
  let Inst{17-16} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_st32_mbmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3A
  let AsmString = "st32 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, AR:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st32_mbmn_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMIMIAI
  let AsmString = "st32 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, AR:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-8} = op2{11-8};
  let Inst{19-16} = op2{7-4};
  let Inst{3-0} = op2{3-0};
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st32step_mbmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FM2PA
  let AsmString = "st32step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, AR:$op3, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{8-6} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st32step_mbmn_si : EncodedWorkerI, Sched<[WriteMain]> {
  // FMIPAI
  let AsmString = "st32step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, AR:$op3, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2{3-0};
  let Inst{3-0} = op2{7-4};
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{8-6} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st64_mbmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3A
  let AsmString = "st64 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, ARPairOperand:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st64_mbmn_zi : EncodedWorkerI, Sched<[WriteMain]> {
  // FMIMIAI
  let AsmString = "st64 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, ARPairOperand:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-8} = op2{11-8};
  let Inst{19-16} = op2{7-4};
  let Inst{3-0} = op2{3-0};
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st64pace_mbmn_ef : EncodedWorkerI, Sched<[WriteMain]> {
  // FMIPAI
  let AsmString = "st64pace $op3, $op1, $op0, $op2";
  dag OutOperandList = (outs MRPair:$op1);
  dag InOperandList = (ins MR:$op0, MRPair:$op1_in, imm8zi:$op2, ARPairOperand:$op3, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2{3-0};
  let Inst{3-0} = op2{7-4};
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{8-6} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st64step_mbmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FM2PA
  let AsmString = "st64step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, ARPairOperand:$op3, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{8-6} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st64step_mbmn_si : EncodedWorkerI, Sched<[WriteMain]> {
  // FMIPAI
  let AsmString = "st64step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, ARPairOperand:$op3, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2{3-0};
  let Inst{3-0} = op2{7-4};
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{8-6} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_swap8_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FSXD
  let AsmString = "swap8 $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins AR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b111;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b100;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let Predicates = [IsWorker, IsIpu21Plus];
}
class inst_tapack_mmmn : EncodedWorkerI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "tapack $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MRPair:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-2} = 0b00;
  let Inst{1-0} = 0b01;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_uget_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FXBXI2
  let AsmString = "uget $op0, $op1";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins imm8zi:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<8> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b000;
  let Inst{23-20} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = op0;
  let Inst{7-0} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{24} = 1; // System instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_uput_aaan_zi : EncodedWorkerI, Sched<[WriteAux]> {
  // FAX3I2
  let AsmString = "uput $op1, $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins AR:$op0, imm8zi:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<8> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{19-16} = 0b0000;
  let Inst{14-12} = 0b000;
  let Inst{11-8} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{7-0} = op1;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{24} = 1; // System instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_urand32_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FX3BX
  let AsmString = "urand32 $op0";
  dag OutOperandList = (outs AR:$op0);
  dag InOperandList = (ins CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = 0b0000;
  let Inst{19-16} = 0b0000;
  let Inst{15-12} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_urand64_aaan : EncodedWorkerI, Sched<[WriteAux]> {
  // FX3BX
  let AsmString = "urand64 $op0";
  dag OutOperandList = (outs ARPairOperand:$op0);
  dag InOperandList = (ins CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = 0b0000;
  let Inst{19-16} = 0b0000;
  let Inst{15-12} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{7-4} = op0;
  let TSFlags{22} = 1; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
// Memory instructions with complex-pattern addr modes.

// ld128_mman (FM3D)
def LD128 : inst_ld128_mman, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ld128 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ld128_mman_zi (FMDMI3)
def LD128_ZI : inst_ld128_mman_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ld128 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// ld32_mman (FM3D)
def LD32_A : inst_ld32_mman, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ld32 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ld32_mman_zi (FMDMI3)
def LD32_ZI_A : inst_ld32_mman_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ld32 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// ld64_mman (FM3D)
def LD64_A : inst_ld64_mman, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ld64 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ld64_mman_zi (FMDMI3)
def LD64_ZI_A : inst_ld64_mman_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ld64 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// ldb16_mman (FM3D)
def LDB16 : inst_ldb16_mman, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ldb16 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ldb16_mman_zi (FMDMI3)
def LDB16_ZI : inst_ldb16_mman_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ldb16 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// ldb8_mman (FM3D)
def LDB8 : inst_ldb8_mman, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ldb8 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ldb8_mman_zi (FMDMI3)
def LDB8_ZI : inst_ldb8_mman_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ldb8 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// st32_mbmn (FM3A)
def ST32_A : inst_st32_mbmn, FM3A {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "st32 $op3, $addr";
  dag InOperandList = (ins AR:$op3, MEMrrr:$addr, CoissueFlag:$coissue);
}
// st32_mbmn_zi (FMIMIAI)
def ST32_ZI_A : inst_st32_mbmn_zi, FMIMIAI {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "st32 $op3, $addr";
  dag InOperandList = (ins AR:$op3, MEMrri:$addr, CoissueFlag:$coissue);
}
// st64_mbmn (FM3A)
def ST64_A : inst_st64_mbmn, FM3A {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "st64 $op3, $addr";
  dag InOperandList = (ins ARPairOperand:$op3, MEMrrr:$addr, CoissueFlag:$coissue);
}
// st64_mbmn_zi (FMIMIAI)
def ST64_ZI_A : inst_st64_mbmn_zi, FMIMIAI {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "st64 $op3, $addr";
  dag InOperandList = (ins ARPairOperand:$op3, MEMrri:$addr, CoissueFlag:$coissue);
}
