//
// Graphcore Limited.
//
// Automatically generated file.
// 
// Generated by llvm_generation.py
//

// Operand classes.

def imm11si : ImmSIOperand<11, ImmAsmOperand<"11si">>;
def imm12iz : ImmIZOperand<12, ImmAsmOperand<"12iz">>;
def imm12zi : ImmZIOperand<12, ImmAsmOperand<"12zi">>;
def imm13zi : ImmZIOperand<13, ImmAsmOperand<"13zi">>;
def imm16si : ImmSIOperand<16, ImmAsmOperand<"16si">>;
def imm16zi : ImmZIOperand<16, ImmAsmOperand<"16zi">>;
def imm19zi : ImmZIOperand<19, ImmAsmOperand<"19zi">>;
def imm1zi : ImmZIOperand<1, ImmAsmOperand<"1zi">>;
def imm2zi : ImmZIOperand<2, ImmAsmOperand<"2zi">>;
def imm3zi : ImmZIOperand<3, ImmAsmOperand<"3zi">>;
def imm4zi : ImmZIOperand<4, ImmAsmOperand<"4zi">>;
def imm6zi : ImmZIOperand<6, ImmAsmOperand<"6zi">>;
def imm7zi : ImmZIOperand<7, ImmAsmOperand<"7zi">>;
def imm8si : ImmSIOperand<8, ImmAsmOperand<"8si">>;
def imm8zi : ImmZIOperand<8, ImmAsmOperand<"8zi">>;
// Instructions.

class inst_abs_mmmn : EncodedI, Sched<[WriteMain]> {
  // FSXD
  let AsmString = "abs $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b111;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_add_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "add $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b01;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_add_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "add $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16si:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_add_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "add $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_and_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "and $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{1-0} = 0b11;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_and_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FSDI3
  let AsmString = "and $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_andc_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "andc $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b00;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_andc_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FSDI3
  let AsmString = "andc $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b011;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_bitrev8_mmmn : EncodedI, Sched<[WriteMain]> {
  // FSXD
  let AsmString = "bitrev8 $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_br_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMX4
  let AsmString = "br $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_bri_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FXI5
  let AsmString = "bri $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins Rel19S2Operand:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<19> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23} = 0b1;
  let Inst{22-21} = 0b00;
  let Inst{20} = 0b0;
  let Inst{19} = 0b0;
  let Inst{18-0} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_brneg_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMI5
  let AsmString = "brneg $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, Rel19S2Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<19> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{19} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{18-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_brnz_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMI5
  let AsmString = "brnz $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, Rel19S2Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<19> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{19} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{18-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_brnzdec_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FPI5
  let AsmString = "brnzdec $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op0_in, Rel19S2Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "$op0 = $op0_in";
  bits<4> op0;
  bits<19> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{19} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{18-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_brpos_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMI5
  let AsmString = "brpos $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, Rel19S2Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<19> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{19} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{18-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_brz_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMI5
  let AsmString = "brz $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, Rel19S2Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<19> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{19} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{18-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_call_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FDI5
  let AsmString = "call $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins Rel19S2Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<20> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{19-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{23} = 1; // Control instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_clz_mmmn : EncodedI, Sched<[WriteMain]> {
  // FSXD
  let AsmString = "clz $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b010;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpeq_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b10;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpeq_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16si:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpeq_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "cmpeq $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpne_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "cmpne $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b11;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpslt_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "cmpslt $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b00;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpslt_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "cmpslt $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16si:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpult_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "cmpult $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b01;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cmpult_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "cmpult $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, Rel16Operand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_cms_mmmn : EncodedI, Sched<[WriteMain]> {
  // FSXD
  let AsmString = "cms $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b001;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_get_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FNXI2
  let AsmString = "get $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins imm8zi:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<8> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23} = 0b0;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b000;
  let Inst{22-20} = 0b000;
  let Inst{11-8} = 0b0000;
  let Inst{7-0} = op1;
  let Inst{19-16} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{24} = 1; // System instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_ld32_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ld32 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-2} = 0b00;
  let Inst{1-0} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld32_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ld32 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld32step_mmmn : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ld32step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld32step_mmmn_si : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ld32step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds16_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "lds16 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-2} = 0b00;
  let Inst{1-0} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds16_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "lds16 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds16step_mmmn : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "lds16step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds16step_mmmn_si : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "lds16step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds8_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "lds8 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-2} = 0b00;
  let Inst{1-0} = 0b01;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds8_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "lds8 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds8step_mmmn : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "lds8step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_lds8step_mmmn_si : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "lds8step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz16_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ldz16 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-2} = 0b01;
  let Inst{1-0} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz16_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ldz16 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz16step_mmmn : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ldz16step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz16step_mmmn_si : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ldz16step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz8_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM3D
  let AsmString = "ldz8 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b001;
  let Inst{3-2} = 0b01;
  let Inst{1-0} = 0b01;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz8_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMDMI3
  let AsmString = "ldz8 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz8step_mmmn : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FM2PD
  let AsmString = "ldz8step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{1-0} = 0b00;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let Inst{7-4} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ldz8step_mmmn_si : EncodedI, Sched<[WriteMain, WriteFreeMain]> {
  // FMDPI2
  let AsmString = "ldz8step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1, MR:$op3);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{11-9} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_max_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "max $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b10;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_max_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "max $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16si:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_max_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "max $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_min_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "min $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b010;
  let Inst{1-0} = 0b11;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_min_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "min $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16si:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_min_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "min $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_movz_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM2PX
  let AsmString = "movz $op1, $op0, $op2";
  dag OutOperandList = (outs MR:$op1);
  dag InOperandList = (ins MR:$op2, MR:$op1_in, MR:$op0, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op2;
  bits<4> op1;
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b010;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{19-16} = op2;
  let Inst{15-12} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_mul_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "mul $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b00;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_mul_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "mul $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16si:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_or_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "or $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b01;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_or_mmmn_iz : EncodedI, Sched<[WriteMain]> {
  // FSDI3
  let AsmString = "or $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm12iz:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b100;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_or_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FSDI3
  let AsmString = "or $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b001;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_popc_mmmn : EncodedI, Sched<[WriteMain]> {
  // FSXD
  let AsmString = "popc $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b011;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_put_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMXI2
  let AsmString = "put $op1, $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, imm8zi:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<8> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b000;
  let Inst{11-8} = 0b0000;
  let Inst{19-16} = 0b0000;
  let Inst{7-0} = op1;
  let Inst{23-20} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{24} = 1; // System instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_roll16_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "roll16 $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b10;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_roll8l_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "roll8l $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b011;
  let Inst{1-0} = 0b11;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_roll8r_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "roll8r $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b00;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_setzi_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FDI5
  let AsmString = "setzi $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins Rel20Operand:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<20> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{19-0} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shl_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "shl $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b01;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shl_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FSDI3
  let AsmString = "shl $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b010;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shr_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "shr $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b10;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shr_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FSDI3
  let AsmString = "shr $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b101;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shrs_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "shrs $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b100;
  let Inst{1-0} = 0b11;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shrs_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FSDI3
  let AsmString = "shrs $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm12zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b110;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{11-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shuf8x8hi_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "shuf8x8hi $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b00;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_shuf8x8lo_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "shuf8x8lo $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b01;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort4x16hi_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "sort4x16hi $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b10;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort4x16lo_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "sort4x16lo $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b101;
  let Inst{1-0} = 0b11;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort8_mmmn : EncodedI, Sched<[WriteMain]> {
  // FSXD
  let AsmString = "sort8 $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b100;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort8x8hi_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "sort8x8hi $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b00;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sort8x8lo_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "sort8x8lo $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b01;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_st32_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FM3I3
  let AsmString = "st32 $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, imm12zi:$op2, MR:$op3, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<12> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_st32step_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FM2PI2
  let AsmString = "st32step $op3, $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op1);
  dag InOperandList = (ins MR:$op0, MR:$op1_in, imm8si:$op2, MR:$op3, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op0;
  bits<4> op1;
  bits<8> op2;
  bits<4> op3;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{7-0} = op2;
  let Inst{19-16} = op3;
  let TSFlags{2-0} = 2; // Operand modifier.
  let TSFlags{8-6} = 2; // Operand modifier.
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_stm32_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM3X2
  let AsmString = "stm32 $op2, $op0, $op1";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b1;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{7-4} = 0b0000;
  let Inst{3-0} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{19-16} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_stm32step_mmmn : EncodedI, Sched<[WriteMain]> {
  // FM2PX
  let AsmString = "stm32step $op2, $op1, $op0";
  dag OutOperandList = (outs MR:$op1);
  dag InOperandList = (ins MR:$op2, MR:$op1_in, MR:$op0, CoissueFlag:$coissue);
  let Constraints = "$op1 = $op1_in";
  bits<4> op2;
  bits<4> op1;
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{11} = 0b1;
  let Inst{10-8} = 0b001;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{23-20} = op0;
  let Inst{19-16} = op2;
  let Inst{15-12} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayStore = 1;
}
class inst_sub_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "sub $op0, $op2, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b110;
  let Inst{1-0} = 0b10;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sub_mmmn_si : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "sub $op0, $op2, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16si:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b1;
  let Inst{27} = 0b1;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_sub_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FMNI4
  let AsmString = "sub $op0, $op2, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, imm16zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b01;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b1;
  let Inst{24} = 0b1;
  let Inst{19-16} = op0;
  let Inst{23-20} = op1;
  let Inst{15-0} = op2;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_swap8_mmmn : EncodedI, Sched<[WriteMain]> {
  // FSXD
  let AsmString = "swap8 $op0, $op1";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b1;
  let Inst{24} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{15} = 0b0;
  let Inst{14-12} = 0b101;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b000;
  let Inst{3-0} = 0b0000;
  let Inst{7-4} = op0;
  let Inst{23-20} = op1;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_trap_mmmn_zi : EncodedI, Sched<[WriteMain]> {
  // FX3I
  let AsmString = "trap $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins imm4zi:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23} = 0b1;
  let Inst{14-12} = 0b001;
  let Inst{22-20} = 0b000;
  let Inst{15} = 0b0;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-4} = 0b0000;
  let Inst{3-0} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{24} = 1; // System instruction.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_xnor_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "xnor $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{1-0} = 0b00;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
class inst_xor_mmmn : EncodedI, Sched<[WriteMain]> {
  // FMXMN
  let AsmString = "xor $op0, $op1, $op2";
  dag OutOperandList = (outs MR:$op0);
  dag InOperandList = (ins MR:$op1, MR:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<4> op2;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{11} = 0b0;
  let Inst{10-8} = 0b111;
  let Inst{1-0} = 0b01;
  let Inst{19-16} = 0b0000;
  let Inst{3-2} = 0b00;
  let Inst{23-20} = op1;
  let Inst{15-12} = op2;
  let Inst{7-4} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
}
// Memory instructions with complex-pattern addr modes.

// ld32_mmmn (FM3D)
def LD32 : inst_ld32_mmmn, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ld32 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ld32_mmmn_zi (FMDMI3)
def LD32_ZI : inst_ld32_mmmn_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ld32 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// lds16_mmmn (FM3D)
def LDS16 : inst_lds16_mmmn, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "lds16 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// lds16_mmmn_zi (FMDMI3)
def LDS16_ZI : inst_lds16_mmmn_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "lds16 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// lds8_mmmn (FM3D)
def LDS8 : inst_lds8_mmmn, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "lds8 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// lds8_mmmn_zi (FMDMI3)
def LDS8_ZI : inst_lds8_mmmn_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "lds8 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// ldz16_mmmn (FM3D)
def LDZ16 : inst_ldz16_mmmn, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ldz16 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ldz16_mmmn_zi (FMDMI3)
def LDZ16_ZI : inst_ldz16_mmmn_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ldz16 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
// ldz8_mmmn (FM3D)
def LDZ8 : inst_ldz8_mmmn, FM3D {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{11-8};
  let AsmString = "ldz8 $op3, $addr";
  dag InOperandList = (ins MEMrrr:$addr, CoissueFlag:$coissue);
}
// ldz8_mmmn_zi (FMDMI3)
def LDZ8_ZI : inst_ldz8_mmmn_zi, FMDMI3 {
  let op0 = addr{3-0};
  let op1 = addr{7-4};
  let op2 = addr{19-8};
  let AsmString = "ldz8 $op3, $addr";
  dag InOperandList = (ins MEMrri:$addr, CoissueFlag:$coissue);
}
