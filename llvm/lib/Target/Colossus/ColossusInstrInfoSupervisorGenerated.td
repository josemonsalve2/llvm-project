//
// Graphcore Limited.
//
// Automatically generated file.
// 
// Generated by llvm_generation.py
//

// Instructions.
class inst_ld128putcs_mmmn_zi : EncodedSupervisorI, Sched<[WriteMain]> {
  // FXI2
  let AsmString = "ld128putcs $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins imm8zi:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<8> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b101;
  let Inst{22-20} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-0} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_ld64putcs_mmmn_zi : EncodedSupervisorI, Sched<[WriteMain]> {
  // FXI2
  let AsmString = "ld64putcs $op0";
  dag OutOperandList = (outs );
  dag InOperandList = (ins imm8zi:$op0, CoissueFlag:$coissue);
  let Constraints = "";
  bits<8> op0;
  bits<1> coissue;
  let Inst{31} = coissue;
  let Inst{30-29} = 0b10;
  let Inst{28} = 0b0;
  let Inst{27} = 0b0;
  let Inst{26} = 0b0;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23} = 0b0;
  let Inst{15} = 0b1;
  let Inst{14-12} = 0b100;
  let Inst{22-20} = 0b000;
  let Inst{19-16} = 0b0000;
  let Inst{11-8} = 0b0000;
  let Inst{7-0} = op0;
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{25} = 1; // Can coissue.
  let mayLoad = 1;
}
class inst_run_mmmn_zi : EncodedSupervisorI, Sched<[WriteMain]> {
  // FM2I4
  let AsmString = "run $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, RunOperand:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = 0b0;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b0;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2{11-0};
  let Inst{19-16} = op2{15-12};
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{24} = 1; // System instruction.
  let TSFlags{25} = 0; // Can coissue.
}
class inst_runall_mmmn_zi : EncodedSupervisorI, Sched<[WriteMain]> {
  // FM2I4
  let AsmString = "runall $op0, $op1, $op2";
  dag OutOperandList = (outs );
  dag InOperandList = (ins MR:$op0, MR:$op1, imm16zi:$op2, CoissueFlag:$coissue);
  let Constraints = "";
  bits<4> op0;
  bits<4> op1;
  bits<16> op2;
  bits<1> coissue;
  let Inst{31} = 0b0;
  let Inst{30-29} = 0b00;
  let Inst{28} = 0b1;
  let Inst{27} = 0b0;
  let Inst{26} = 0b1;
  let Inst{25} = 0b0;
  let Inst{24} = 0b1;
  let Inst{23-20} = op0;
  let Inst{15-12} = op1;
  let Inst{11-0} = op2{11-0};
  let Inst{19-16} = op2{15-12};
  let TSFlags{22} = 0; // Lane number.
  let TSFlags{24} = 1; // System instruction.
  let TSFlags{25} = 0; // Can coissue.
}
// Memory instructions with complex-pattern addr modes.

